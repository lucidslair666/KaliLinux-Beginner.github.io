OSI七层参考模型
	物理层 数据链路层 网络层 传输层 会话层 表示层 应用层
TCP/IP三层概念模型
	网络接口层 网络层 传输层 应用层
	
  
TCP/IP协议群
	网际协议 : IP / ICMP / ARP
	传输协议 : TCP / UDP
	路由控制协议 : OSPF / RIP / BGP
	应用协议 : HTTP / FTP / TELNET / SMTP / SNMP


什么是首部?
  在每个分层中,都会对上一层传来的数据增加一个首部,这个首部包含了该层必要的信息/
  从下一层的角度来看,从上一层传来的数据包的全部都将被视为本层的数据,并在其上加上首部
  总的来说,一层将要转发的数据,就是上一层的信息 + 本层的首部.


传输层
	具有代表性的传输层协议就是TCP和UDP
	TCP
		面向连接的,可靠的流协议.流是指不间断的数据结构.
	UDP
		不可靠的数据报协议.UDP可以确保发送数据包的大小,但是不能保证信息的可达性
	
	当传输层有必要实现可靠传输的情况下,使用TCP协议传输,对于那些对高速传输和实时性有较高要求的通信或者广播通信来说,应使用UDP协议传输
	
  
端口号
	什么是端口号?
		传输层中,端口号用来识别同一台计算机中进行通信的不同应用程序,所以也被称为程序地址
		
	通过 源IP地址,目标IP地址,协议号,源端口号,目标端口号来识别一个通信
	
	端口号的确定主要有两个方法
		标准既定的端口号,也叫静态方法,他是指每个应用程序都有指定的端口号,是固定的,主要分布在0~1023之间,而在1024~49151之间的端口号,可以用于任何的通信用途.
		时序分配法,也叫动态分配,客户端不同于服务器,接受服务的客户端没必要确定端口号,系统会为客户端的应用程序分配端口号.端口号范围在49152~65535之间
		
	端口号由其使用的传输层协议决定的,不同传输层协议之间可以使用相同的端口号   (有待考察)
	
  
UDP
	UDP是利用IP提供面向无连接的通信服务
	UDP无法保证数据包的可达性和顺序性,'尽力而为'地传输数据
	UDP无法进行流量控制等避免网络阻塞的行为,当需要用到控制细节时,只能交给UDP的上层应用程序去做


TCP
	TCP是利用IP提供面向有连接的通信服务,当连接建立后,才会相互发送数据
	可以实现数据传输时的各种控制功能,也可以在丢包时进行重发控制,可以对次序打乱的分包进行顺序控制.
	
	TCP的三次握手,相互建立连接
	
		A     ---                   SYN = 1 , seq = J                      --- >  B
		A     <---        SYN = 1 , ACK = 1 , ack = J + 1 , seq = K        ---    B
		A      ---                 ACK = 1 , ack = K + 1                    --->  B
		至此A , B 建立连接
		
	TCP的四次挥手,相互断开连接
		由于TCP是全双工的, 因此每个方向需要单独进行关闭 , 当一端发送 FIN 来终止这一方向的连接时,对端收到一个 FIN 只代表这一方向上没有数据流通了,即不会再接受数据了,但是这个TCP连接依旧能够发送数据,知道这一方向也发送了 FIN .首先执行关闭的一方将执行主动关闭,而另一方将执行被动关闭.当然,也会出现同时发起主动关闭的情况.
		TCP相互断开连接,就是一方发送 FIN 报文,一方回应 ACK 报文.然后回应 ACK 的主机发送 FIN 报文,当收到对端回应的 ACK 报文时,TCP连关闭.
		A      ---                          FIN = M                          --->   B
		A     <---                        ack = M + 1                        ---    B
		A     <---                         FIN = N                            ---    B
		A      ---                  ACK = 1 , ack = N + 1                     --->   B
    至此,A,B完全断开连接
    
		总结的说,要想关闭一个TCP连接,必须要两端主机都向对方发送 FIN 报文,才会真正结束这个TCP连接,否则只是单向关闭,TCP连接依旧能够传输数据.
		
		上面提到了TCP是全双工的,那么什么是全双工?还有哪些分类?他们有什么区别?
			单工 : 一方只能发送数据,一方只能接受数据,通信是完全单向的
			半双工 : 双方都可以发送数据,但是同一时间中,只能有一方发送数据,一方接收数据
			全双工 : 双方不仅能发送数据,而且同一时间内,可以同时发送数据,也可以同时接收数据
		
    
通过序列号与确认应答机制提高传输的可靠性
	在TCP中,当发送端的数据达到目标主机时,若对端目标端口开放,则对端主机会返回一个收到消息的通告,也就是确认应答(ACK),如果没有收到对端的应答,则传输过程中数据丢失的可能性极大.
	但是,即使没有收到对端回应的ACK报文,也不一代表对端没有收到数据.很有可能是对端回应的ACK在传输过程中丢失,也有可能因为网络拥塞而导致数据报文延迟到达
	对此,TCP协议使用重发机制来确保数据的可靠性,但是对于目标主机来说,反复收到一个相同的数据是很不可取的,目标主机必须放弃重复的数据包,所以,引入序列号来提高可靠性
	
	确切的说,序列号就是按照顺序给发送的数据的每一个字节都标上编号
	当对端主机收到数据时,查询接收受数据的序列号和数据长度,将自己下一步应该接收的序列号作为确认应答发送回去,这样,通过序列号和确认应答号,TCP能够有所舍弃地选择是否接收数据,从而实现了可靠的传输
	
	总结一下,序列号就是将发送的数据的每一个字节加上编号,实现发送数据的有序性,解决了数据重复发送的问题,让主机可以根据序列号有选择地接收数据,而一味地全盘接收,再逐一舍弃
	
  
重发超时的确定
	当网络较为拥塞的时候,可能本机发送的数据延迟到达目标主机,而目标主机的ACK回应报文也相应推迟到达本机,但是此时,由于本机一定时间未收到对端回应,根据重发机制,再次发送数据往目标主机,以此类推,变成一个死循环,这对网络的稳定性有很大的影响
	对此,TCP引入了重发超时的设定,让拥塞的网络有一定时间的缓冲,确保对端主机延迟的回应报文可以在本机重发机制生效之前到达本机
	重发超时是指在重发数据之前,等待确认应答到来的特定时间间隔,如果超出这个时间而应答未到达,则本机的重发机制将会生效,重新发送数据
	并且,数据不再会被无限制,反复的重发了,当重发数据到达一定的次数,而依旧没有收到对端主机的应答时,就会判断为网络或者对端主机发生了异常,强制关闭连接,并且通知应用通信产生异常,强行终止应用.
	
	就是说,重发超时能够使得重发机制有一定的延迟生效时间,使得数据发送方不会再一味地重发数据,从而提高了传输的稳定性,也会在一定程度上降低网络的拥塞程度
	
  
以段为单位发送数据
	再连接TCP连接的同时,也可以确定发送数据包的单位,也就叫做 : 最大消息长度( MSS ),在理想的情况下,最大消息长度刚好是IP中不会被分片处理的最大数据长度
	TCP在发送大量数据时,是以MSS的大小将数据分割发送的,并且在重发时也是这样
	MSS在三次握手中,由两端主机之间计算得出,两端主机在发送SYN时,会在TCP首部中写入MSS选项,告诉对方自己接口能适应的MSS大小,然后两者之间取一个较小的值作为双方共同使用的MSS值
	
  
利用窗口控制提高速度
	上面介绍过,以前的TCP在发送数据时,是以一个段为单位的,每发送一个段进行一次确认应答的处理.
	这样的后果会导致,单个包往返时间越长,通信的效率就越低.而且由于TCP传输要保证数据发送的可靠性,下一个数据包的发送必须要等到主机收到上一个数据包的确认应答.这样,传输效率将会很低.
	那么,是否可以选择将多个段合并在一起,以更大的单位发送,从而提高传输效率呢?
	答案当然是可以的,TCP引入了窗口这个概念,发送数据不再是每个都分段发送,确认应答也不是单个回应.这样转发时间将会被大幅度地减短,并且发送端主机不必再在发送一个数据段后一直等待对端确认应答了,而是继续发送数据包
	窗口大小就是指无需等待确认应答而可以继续发送数据的最大值,类似于使用了缓冲区,实现对多个段同时进行确认应答的功能
	
	发送端应该设置缓冲区,当整个窗口的确认应答没有到达之前(例如某段数据出现丢包),则发送端依旧需要重发这些数据,直到他们被确认为止.
	
	窗口控制中,一般会出现以下两种丢包情况
		1 : 确认应答未能返回的情况,此时数据已经到达对端,是不需要发送端重发的,可以通过下一个确认应答进行确认
		2 : 某个报文段丢失,当某个报文段丢失时,发送端会收到对端的确认应答,确认应答中包含了缺失的报文序列号,如果发送端连续收到了三个这样的确认应答,则会对其对应的报文段进行重发.
		
	个人感觉,窗口机制就是类似于多线程,利用缓冲区,使主机可以同时处理多个数据包,同时发送多条数据,同时对多条数据进行确认应答,这样大大减少了TCP传输中为了确保可靠性而产生的等待时间,提高了数据发送的效率.
	
